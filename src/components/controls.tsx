
'use client';

import { usePathname, useRouter } from 'next/navigation';
import { useCallback } from 'react';
import { cn } from '@/lib/utils';
import {
  CreditCard,
  Package,
} from 'lucide-react';

type ControlsProps = {
  categories: string[];
  currentCategory: string;
};

const iconClass = "w-5 h-5";

const categoryIcons: { [key: string]: React.ReactNode } = {
  all: 'üóÇÔ∏è',
  –¢–µ–∫—Å—Ç: 'üìù',
  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 'üñºÔ∏è',
  –ö–æ–¥: 'üíª',
  –í–∏–¥–µ–æ: 'üé¨',
  –ê—É–¥–∏–æ: 'üéµ',
  –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: 'üìà',
  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ: 'üí≥',
  –î–∏–∑–∞–π–Ω: 'üé®',
  –†–∞–∑–Ω–æ–µ: 'üì¶',
  –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: 'ü§ñ',
  –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: '‚ö°Ô∏è',
  '–ë–∏–∑–Ω–µ—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã': 'üíº',
  –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: 'üéì',
  –ó–¥–æ—Ä–æ–≤—å–µ: '‚ù§Ô∏è‚Äçü©π',
  '3D –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üßä',
};

export default function Controls({ categories, currentCategory }: ControlsProps) {
  const router = useRouter();
  const pathname = usePathname();

  const handleCategoryChange = (value: string) => {
    const params = new URLSearchParams(window.location.search);
    if (value === 'all') {
      params.delete('category');
    } else {
      params.set('category', value);
    }
    params.set('page', '1');
    router.push(pathname + '?' + params.toString(), {
      scroll: false,
    });
  };

  const categoryOrder = [
    'all',
    '–¢–µ–∫—Å—Ç',
    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    '–ö–æ–¥',
    '–í–∏–¥–µ–æ',
    '–ê—É–¥–∏–æ',
    '–î–∏–∑–∞–π–Ω',
    '3D –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
    '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    '–ë–∏–∑–Ω–µ—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    '–ó–¥–æ—Ä–æ–≤—å–µ',
    '–†–∞–∑–Ω–æ–µ',
    '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ',
  ];

  const sortedCategories = [...categories].sort((a, b) => {
    const aIndex = categoryOrder.indexOf(a);
    const bIndex = categoryOrder.indexOf(b);
    if (aIndex === -1 && bIndex === -1) return a.localeCompare(b);
    if (aIndex === -1) return 1;
    if (bIndex === -1) return -1;
    return aIndex - bIndex;
  });

  return (
    <div className="mb-8">
      <div className="flex items-center gap-2 overflow-x-auto pb-2 -mx-4 px-4 scrollbar-hide">
        {sortedCategories.map((cat) => (
          <button
            key={cat}
            onClick={() => handleCategoryChange(cat)}
            className={cn(
              'flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors shrink-0',
              currentCategory === cat
                ? 'bg-primary/20 text-primary-foreground'
                : 'bg-card/50 text-muted-foreground hover:bg-card/90 hover:text-white'
            )}
          >
            <span className="text-lg">{categoryIcons[cat] || 'üìÅ'}</span>
            <span className="capitalize">{cat === 'all' ? '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' : cat}</span>
          </button>
        ))}
      </div>
    </div>
  );
}
